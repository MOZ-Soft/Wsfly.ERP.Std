<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Wsfly.ERP.Std.AppCode.Converters"
                    xmlns:wsConvert="clr-namespace:Wsfly.ERP.Std.AppCode.Converters">

    <!--绑定内容时 如果超过长度 则显示省略号 示例：-->
    <!--Binding="{Binding Path=Remark,Converter={StaticResource Ellipsis},ConverterParameter=10}"-->
    <wsConvert:StringEllipsisConvert x:Key="Ellipsis" />

    <!--绑定日期时 格式化显示格式 示例：-->
    <!--Binding="{Binding Path=CreateDate,Converter={StaticResource DateTimeFormat},ConverterParameter=1}"-->
    <!--
        参数：1 yyyy-MM-dd HH:mm:ss
              2 yyyy-MM-dd
              3 HH:mm:ss
                
              21 yyyy年MM月dd日 HH时mm分ss秒
              22 yyyy年MM月dd日
              23 HH时mm分ss秒
        其它方法：StringFormat=\{0:yyyy-MM-dd HH:mm:ss\}
        Binding="{Binding Path=CreateDate,StringFormat=\{0:yyyy-MM-dd HH:mm:ss\}}
    -->
    <wsConvert:DateTimeConvert x:Key="DateTimeFormat" />
    <!--Binding="{Binding Path=IsAudit,Converter={StaticResource BoolConvertFormat}}"-->
    <wsConvert:BoolConvert x:Key="BoolConvertFormat" />
    <!--Visibility="{Binding Path=IsShow,Converter={StaticResource VisibilityConvertFormat},ConverterParameter=1}"-->
    <wsConvert:VisibilityConvert x:Key="VisibilityConvertFormat" />
    
    <!--=颜色 BEGIN=-->
    <Color x:Key="ColorMain">#333</Color>
    <Color x:Key="ColorMainLight">#666</Color>
    <Color x:Key="ColorMainDark">#111</Color>
    <Color x:Key="ColorMainText">#000</Color>
    <Color x:Key="ColorMainAssist">#888</Color>
    <!--=颜色 END=-->

    <!--=笔刷样式 BEGIN=-->
    <LinearGradientBrush x:Key="MainBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ColorMain}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="MainLightBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ColorMainLight}" Offset="0"></GradientStop>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="MainDarkBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ColorMainDark}" Offset="0"></GradientStop>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="MainDarkTextBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ColorMainText}" Offset="0"></GradientStop>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="MainAssistBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ColorMainAssist}" Offset="0"></GradientStop>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="FadeBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ColorMainLight}" Offset="0"/>
        <GradientStop Color="{DynamicResource ResourceKey=ColorMain}" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="FadeBrushRed" StartPoint="0,0.5" EndPoint="1,0.5">
        <GradientStop Color="Red" Offset="0"/>
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="WinBorderBrush">
        <GradientStop Color="#00AFFF" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="WinBorderDarkBrush">
        <GradientStop Color="#00A2EC" Offset="0"/>
    </LinearGradientBrush>
    <!--=笔刷样式 END=-->

    <!--框架样式 BEGIN-->
    <Color x:Key="Color_TopBackground">#88ffffff</Color>
    <Color x:Key="Color_BottomBackground">#88ffffff</Color>
    <Color x:Key="Color_LeftBackground">#11333333</Color>
    <Color x:Key="Color_NavTabBackground">#33888888</Color>
    <Color x:Key="Color_WinActionBrush">#888888</Color>
    <Color x:Key="Color_WinActionsBorder">#cccccc</Color>
    <Color x:Key="Color_WinBorder">#999999</Color>

    <LinearGradientBrush x:Key="TopBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_TopBackground}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BottomBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_BottomBackground}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="LeftBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_LeftBackground}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NavTabBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_NavTabBackground}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="lineWinActionBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_WinActionBrush}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="lineWinActionBorderBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_WinActionsBorder}" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="mainWinBorderBrush">
        <GradientStop Color="{DynamicResource ResourceKey=Color_WinBorder}" Offset="0"/>
    </LinearGradientBrush>

    <ColorAnimation x:Key="ColorAnimation" Storyboard.TargetProperty="Control.BorderBrush"
         BeginTime="00:00:00" From="Black" To="Red"
         Duration="00:00:01" AutoReverse="True" RepeatBehavior="Forever"/>


    <!--主窗口顶部栏-->
    <Style x:Key="panelTop" TargetType="{x:Type StackPanel}">
        <Setter Property="Background" Value="{DynamicResource TopBrush}"></Setter>
    </Style>

    <!--主窗口左侧栏-->
    <Style x:Key="panelLeft" TargetType="{x:Type StackPanel}">
        <Setter Property="Background" Value="{DynamicResource LeftBrush}"></Setter>
    </Style>

    <!--主窗口边框-->
    <Style x:Key="borderMain" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource mainWinBorderBrush}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
    </Style>

    <!--窗口操作样式 最小化 最大化 关闭-->
    <Style x:Key="borderWinActions" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#AAffffff"></Setter>
        <Setter Property="BorderBrush" Value="#cccccc"></Setter>
        <Setter Property="BorderThickness" Value="1 0 1 1"></Setter>
        <Setter Property="Width" Value="122"></Setter>
        <Setter Property="Margin" Value="0 0 10 0"></Setter>
        <Setter Property="CornerRadius" Value="0 0 5 5"></Setter>
    </Style>

    <!--窗口操作样式 最小化 最大化 关闭-->
    <Style x:Key="borderWinAction" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Background" Value="#AAffffff"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#eee"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--左侧间隔线条-->
    <Style x:Key="borderLeftSpace" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="80"></Setter>
        <Setter Property="Height" Value="1"></Setter>
        <Setter Property="Background" Value="#88ffffff"></Setter>
    </Style>

    <!--内容窗口-->
    <Style x:Key="borderWBox" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#fff"></Setter>
        <Setter Property="Padding" Value="10"></Setter>
        <Setter Property="BorderBrush" Value="#ddd"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
    </Style>


    <!--主窗口左侧栏-->
    <LinearGradientBrush x:Key="BorderProcessBrush">
        <GradientStop Color="#0090ff" Offset="0"/>
        <GradientStop Color="#0088f1" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BorderProcessBrush2" StartPoint="0,0" EndPoint="0,1" >
        <GradientStop Color="#e0dab8" Offset="0"/>
        <GradientStop Color="#b7ad70" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="BorderProcess" TargetType="{x:Type Border}">
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="CornerRadius" Value="5"></Setter>
        <Setter Property="Height" Value="10"></Setter>
        <Setter Property="Background" Value="{DynamicResource BorderProcessBrush}"></Setter>
    </Style>
    <Style x:Key="BorderProcess2" TargetType="{x:Type Border}">
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="CornerRadius" Value="5"></Setter>
        <Setter Property="Height" Value="10"></Setter>
        <Setter Property="Background" Value="{DynamicResource BorderProcessBrush2}"></Setter>
    </Style>

    <!--无样式按钮-->
    <Style x:Key="btnNull" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        <ContentPresenter.BitmapEffect>
                            <DropShadowBitmapEffect Color="#FFF" Direction="-90" ShadowDepth="2" Softness="0.1" Opacity="0.8"/>
                        </ContentPresenter.BitmapEffect>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Tag样式按钮-->
    <Style x:Key="btnTag" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="2 0 0 0"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="#ccc" BorderThickness="1" CornerRadius="3" Background="#AAFFFFFF">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                            <ContentPresenter.BitmapEffect>
                                <DropShadowBitmapEffect Color="#FFF" Direction="-90" ShadowDepth="2" Softness="0.1" Opacity="0.8"/>
                            </ContentPresenter.BitmapEffect>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--菜单项-->
    <!--按钮样式 操作按钮-->
    <Style x:Key="btnMenu" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="Foreground" Value="#333"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="#ccc" BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" Padding="14,4">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Foreground" Value="#000"/>
                                <Setter Property="Opacity" Value="0.8" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Opacity" Value="0.5" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnSubMenu" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="Foreground" Value="#333"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bd" BorderBrush="#fff" BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" Padding="5,4" CornerRadius="5">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Opacity" Value="0.9" />
                                <Setter Property="Background" Value="#88ffffff"/>
                                <Setter Property="BorderThickness" TargetName="bd" Value="1" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Opacity" Value="0.8" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Tab 页面导航-->
    <Style x:Key="borderTab" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource TopBrush}"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource lineWinActionBrush}"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="BorderThickness" Value="1 1 1 0"></Setter>
        <Setter Property="Margin" Value="0 10 2 0"></Setter>
        <Setter Property="CornerRadius" Value="2 2 0 0"></Setter>
        <Setter Property="Padding" Value="10 0"></Setter>
        <Setter Property="Height" Value="30"></Setter>
    </Style>
    <Style x:Key="lblTabTitle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MainLightBrush}"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
    </Style>
    
    <!--Tab 页面内容-->
    <Style x:Key="borderTab_Current" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource NavTabBrush}"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource NavTabBrush}"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="BorderThickness" Value="1 1 1 0"></Setter>
        <Setter Property="Margin" Value="0 10 2 0"></Setter>
        <Setter Property="CornerRadius" Value="2 2 0 0"></Setter>
        <Setter Property="Padding" Value="10 0"></Setter>
        <Setter Property="Height" Value="30"></Setter>
    </Style>
    <Style x:Key="lblTabTitle_Current" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
    </Style>

    <!--按钮样式-->
    <Style x:Key="btn" TargetType="Button">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="77"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="1"/>
        <!--修改模板属性-->
        <Setter Property="Template">
            <Setter.Value>
                <!--控件模板-->
                <ControlTemplate TargetType="Button">
                    <!--背景色-->
                    <Border x:Name="back" Opacity="1" CornerRadius="3">
                        <Border.BitmapEffect>
                            <OuterGlowBitmapEffect Opacity="0.9" GlowSize="0" GlowColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" />
                        </Border.BitmapEffect>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                        <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                        <GradientStop Color="#FFF" Offset="1"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="1" CornerRadius="3" BorderBrush="#5555">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                                <ContentPresenter.BitmapEffect>
                                    <OuterGlowBitmapEffect GlowColor="White" GlowSize="0" Opacity="1" Noise="0"></OuterGlowBitmapEffect>
                                </ContentPresenter.BitmapEffect>
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="6" Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="#AFFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#3FFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="3" Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="#3AAA" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#2111" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#B444"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <DoubleAnimation To="1" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                        <DoubleAnimation To="-135" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                        <ColorAnimation To="#FFF" Duration="0:0:0.3" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                        <ColorAnimation To="#D555" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation To="#CEEE" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation To="#CDDD" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--按钮样式 操作按钮 Action-->
    <Style x:Key="btnAction" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#f2f2f2"/>
        <Setter Property="Padding" Value="20 5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="#ccc" 
                            BorderThickness="1" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#ddd" />
                                <Setter Property="Foreground" Value="#333" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#ccc" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#ddd" />
                                <Setter Property="Foreground" Value="#888" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--按钮样式 导航按钮 OK-->
    <LinearGradientBrush x:Key="btnNavFadeBrush">
        <GradientStop Color="#fff6ba" Offset="0"/>
        <GradientStop Color="#e6c161" Offset="0.5"/>
        <GradientStop Color="#faeebe" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="btnNavFadeBrushHover">
        <GradientStop Color="#fffdf0" Offset="0"/>
        <GradientStop Color="#ffe49e" Offset="0.5"/>
        <GradientStop Color="#fdf5d6" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="btnNav" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource btnNavFadeBrush}"/>
        <Setter Property="BorderBrush" Value="#8a7a52"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="5">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="{DynamicResource btnNavFadeBrushHover}" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="{DynamicResource btnNavFadeBrush}" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#44867554" />
                                <Setter Property="BorderBrush" Value="#55867554" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--按钮样式 操作按钮 Win-->
    <Style x:Key="btnWin" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource WinBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WinBorderDarkBrush}"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="20 5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#008BDA" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#0074B6" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#029CC9" />
                                <Setter Property="Foreground" Value="#006f8f" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--按钮样式 操作按钮 OK-->
    <Style x:Key="btnOk" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource MainBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MainLightBrush}"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="20 5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#000" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#000" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#888" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--按钮样式 操作按钮 Action-->
    <Style x:Key="btnMini" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#f2f2f2"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="#ccc" 
                            BorderThickness="1" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#333" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#ddd" />
                                <Setter Property="Foreground" Value="#888" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnMini2" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#AAFFFFFF"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="#ccc" 
                            BorderThickness="1" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#333" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#ccc" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--登陆按钮-->
    <Style x:Key="btnLogin" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#258dca"/>
        <Setter Property="BorderBrush" Value="#1d79a8"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bd" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" Padding="30,6" CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#000" />
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#000" />
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#888" />
                                <Setter Property="Foreground" Value="#000" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--列表操作按钮样式-->
    <Style x:Key="btnListAction" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#fff"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bd" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" CornerRadius="2">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#000" />
                                <Setter Property="Background" Value="#55ffffff" />
                                <Setter Property="Opacity" Value="1"/>
                                <Setter Property="BorderBrush" TargetName="bd" Value="Transparent" />
                                <Setter Property="BorderThickness" TargetName="bd" Value="1" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#000" />
                                <Setter Property="Background" Value="#AAffffff" />
                                <Setter Property="Opacity" Value="1"/>
                                <Setter Property="BorderBrush" TargetName="bd" Value="Transparent" />
                                <Setter Property="BorderThickness" TargetName="bd" Value="1" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="Opacity" Value="0.3" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="Transparent" />
                                <Setter Property="BorderThickness" TargetName="bd" Value="0" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--列表单元格操作按钮样式-->
    <Style x:Key="btnListCell" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#333"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#AAffffff"/>
        <Setter Property="BorderBrush" Value="#ccc"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bd" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" CornerRadius="2" Padding="10 5">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="Background" Value="#333" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#333" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="Background" Value="#000" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#aaa" />
                                <Setter Property="Background" Value="#ccc" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#ccc" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnListCellEdit" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#333"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#ccc"/>
        <Setter Property="BorderBrush" Value="#ccc"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bd" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" CornerRadius="2" Padding="10 5">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="Background" Value="#333" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#333" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#fff" />
                                <Setter Property="Background" Value="#000" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Foreground" Value="#aaa" />
                                <Setter Property="Background" Value="#ccc" />
                                <Setter Property="BorderBrush" TargetName="bd" Value="#ccc" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--输入框默认样式-->
    <Style x:Key="txt" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border SnapsToDevicePixels="true" x:Name="txtBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Background="{TemplateBinding Background}"/>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="BorderBrush" Value="#ccc" />
                                <Setter Property="Background" Value="#f9f9f9" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--焦点-->
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="BorderBrush" Value="#ccc" />
                                <Setter Property="Background" Value="#f9f9f9" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="BorderBrush" Value="#ccc" />
                                <Setter Property="Background" Value="#eee" />
                                <Setter Property="Foreground" Value="#888" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--输入框【密码】默认样式-->
    <Style x:Key="pwd" TargetType="{x:Type PasswordBox}">
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Background="White"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--输入框圆角样式-->
    <Style x:Key="txtRadius" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush  StartPoint="0,1" EndPoint="0,0">
                    <GradientStop Color="#02d9f9" Offset="0"/>
                    <GradientStop Color="#00c2df" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Rectangle x:Name="txtBorder" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"  StrokeThickness="1"/>
                        <ScrollViewer x:Name="PART_ContentHost" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Padding="{TemplateBinding Padding}"></ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="Stroke" Value="#268dc7" />
                                <Setter Property="Background" Value="#fff" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--焦点-->
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="Stroke" Value="#268dc7" />
                                <Setter Property="Background" Value="#fff" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--输入框圆角样式 密码-->
    <Style x:Key="pwdRadius" TargetType="{x:Type PasswordBox}">
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#7cd0ea"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <Rectangle x:Name="txtBorder" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Background}" Stroke="#7cd0ea"  StrokeThickness="1"/>
                        <ScrollViewer x:Name="PART_ContentHost" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Padding="{TemplateBinding Padding}"></ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="Stroke" Value="#268dc7" />
                                <Setter Property="Background" Value="#fff" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--焦点-->
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="Stroke" Value="#268dc7" />
                                <Setter Property="Background" Value="#fff" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--输入框样式-->
    <Style x:Key="txtText" TargetType="TextBox">
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="Foreground" Value="#000"></Setter>
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="24"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <TextBlock Text="{TemplateBinding Property=Text}" Padding="4,3"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Background="White"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="txtboxLabel" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border SnapsToDevicePixels="true" x:Name="txtBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Background="{TemplateBinding Background}"/>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter TargetName="txtBorder" Property="BorderBrush" Value="#ccc" />
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="Foreground" Value="#333" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CheckBox 样式-->
    <!--当控件获得键盘焦点时的样式-->
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="#7cd0ea" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="#666"/>
        <Setter Property="BorderBrush" Value="#7cd0ea"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator FlowDirection="LeftToRight" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="bd" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" MinHeight="15" MinWidth="15" VerticalAlignment="Center" CornerRadius="2">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Color="White" Offset="0.2"/>
                                        <GradientStop Color="White" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Path x:Name="cp" Width="16" Height="16" Stroke="#333" StrokeThickness="2"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="2,0"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="cp" Property="Data" Value="M 1,1 L 15,15"/>
                            <Setter TargetName="cp" Property="Stroke" Value="#7cd0ea"/>
                            <Setter TargetName="cp" Property="StrokeThickness" Value="1"/>
                            <Setter TargetName="bd" Property="Background" Value="#eee"/>
                            <Setter Property="Foreground" Value="#333"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="cp" Property="Data" Value="M 1,8 L 7,13 15,1"/>
                            <Setter TargetName="cp" Property="Stroke" Value="#333"/>
                            <Setter TargetName="cp" Property="StrokeThickness" Value="2"/>
                            <Setter Property="Foreground" Value="#333"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="bd" Property="Background" Value="#eee"/>
                            <Setter TargetName="bd" Property="BorderBrush" Value="#ccc"/>
                            <Setter Property="Foreground" Value="#555"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bd" Property="BorderBrush" Value="#268dc7"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--WrapPanel默认样式-->
    <Style x:Key="panelFormRow" TargetType="{x:Type WrapPanel}">
        <Setter Property="Margin" Value="0,8,0,0"></Setter>
    </Style>
    <Style x:Key="panelFormContent" TargetType="{x:Type WrapPanel}">
        <Setter Property="Margin" Value="5"></Setter>
    </Style>

    <!--文档标题子样式-->
    <Style x:Key="lblTitle" TargetType="TextBlock">
        <Setter Property="Padding" Value="0 10"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MainBrush}"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value ="{x:Null}" />
    </Style>
    <!--文档子标题子样式-->
    <Style x:Key="lblSubTitle" TargetType="TextBlock">
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MainLightBrush}"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value ="{x:Null}" />
    </Style>
    <!--表单文本标题样式-->
    <Style x:Key="lblFormTitle" TargetType="TextBlock">
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="TextAlignment" Value="Right"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Foreground" Value="#888"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value ="{x:Null}" />
    </Style>
    <!--表单文本内容样式-->
    <Style x:Key="lblFormContent" TargetType="TextBlock">
        <Setter Property="MinWidth" Value="200"></Setter>
        <Setter Property="TextAlignment" Value="Left"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Foreground" Value="#333"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value ="{x:Null}" />
    </Style>
    <!--表单文本提示样式-->
    <Style x:Key="lblFormTips" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Left"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Foreground" Value="#999"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value ="{x:Null}" />
    </Style>
    <!--加载数据失败样式-->
    <Style x:Key="lblLoadError" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Foreground" Value="#999"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value ="{x:Null}" />
    </Style>

    <!--超连接样式-->
    <Style x:Key="Link" TargetType="TextBlock">
        <Setter Property="Foreground" Value="Blue"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="TextBlock.TextDecorations" Value="Underline"></Setter>
    </Style>
    <Style x:Key="Link2" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#333"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Margin" Value="0 5 0 0"></Setter>
    </Style>
    <Style x:Key="Link3" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#888"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Style.Triggers>
            <!--鼠标移入移出-->
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.Setters>
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="Foreground" Value="#333" />
                </Trigger.Setters>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--控件样式 BEGIN-->
    <Color x:Key="DisabledControlDarkColor">#888</Color>
    <Color x:Key="DisabledForegroundColor">#888</Color>

    <Color x:Key="SelectedBackgroundColor">#ccc</Color>
    <Color x:Key="SelectedUnfocusedColor">#ddd</Color>

    <Color x:Key="ControlLightColor">#fff</Color>
    <Color x:Key="ControlMediumColor">#eee</Color>
    <Color x:Key="ControlDarkColor">#ccc</Color>

    <Color x:Key="ControlMouseOverColor">#ccc</Color>
    <Color x:Key="ControlPressedColor">#aaa</Color>

    <Color x:Key="GlyphColor">#000</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#ccc</Color>
    <Color x:Key="BorderMediumColor">#bbb</Color>
    <Color x:Key="BorderDarkColor">#aaa</Color>

    <Color x:Key="DisabledBorderDarkColor">#ccc</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>
    <!--控件样式 END-->

    <!--ScrollBar-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border" Margin="1" CornerRadius="2" BorderThickness="1">
                        <Border.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource BorderMediumColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.BorderBrush>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource ControlLightColor}"/>
                                        <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" >
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                            </Path.Fill>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" CornerRadius="2" Background="#FFFFFF" Opacity="0.3" />
            <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0">
                        <Thumb.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Thumb.BorderBrush>
                        <Thumb.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Thumb.Background>
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#FFFFFF" Opacity="0.3" />
            <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
            <!--<SnippetRepeatButtonStyle_a_lileib>-->
            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1">
                        <Thumb.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Thumb.BorderBrush>
                        <Thumb.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0" />
                                        <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Thumb.Background>
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <!--</SnippetRepeatButtonStyle_a_lileib>-->
            <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LeftScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Column="1" BorderThickness="0,1,1,1">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                            </Border.BorderBrush>
                            <ScrollContentPresenter />
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Grid.Column="1"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- ComboBox -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlMouseOverColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderDarkColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="2"  BorderThickness="1">
                <Border.BorderBrush>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0" />
                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="{DynamicResource ControlLightColor}" />
                                <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <Border Grid.Column="0" CornerRadius="2,0,0,2" Margin="1" >
                <Border.Background>
                    <SolidColorBrush Color="{DynamicResource ControlLightColor}"/>
                </Border.Background>
            </Border>
            <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" >
                <Path.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}"/>
                </Path.Fill>
            </Path>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Foreground" Value="#000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="EditStates">
                                <VisualState x:Name="Editable">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Uneditable" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="2" Focusable="false" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Margin="3,3,23,3"
                              VerticalAlignment="Stretch"
                              HorizontalAlignment="Left">
                        </ContentPresenter>
                        <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="3,3,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                                    </Border.BorderBrush>
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                                    </Border.Background>
                                </Border>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border" Padding="2" SnapsToDevicePixels="true" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected"/>
                                <VisualState x:Name="SelectedUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter />
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ResourceKey=ComboBoxItemBorderBrush}" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--选中状态-->
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ResourceKey=ComboBoxItemBorderBrush}" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ComboBoxItemBorderBrush">
        <GradientStop Color="{DynamicResource ResourceKey=ControlMediumColor}" Offset="0"/>
    </LinearGradientBrush>

    <!--DataGrid-->
    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="AlternationCount" Value="2"></Setter>
        <Setter Property="AlternatingRowBackground" Value="#88F0F0F0"></Setter>
        <Setter Property="HeadersVisibility" Value="All"></Setter>
        <Setter Property="GridLinesVisibility" Value="All"></Setter>
        <Setter Property="HorizontalGridLinesBrush" Value="#aaa"></Setter>
        <Setter Property="VerticalGridLinesBrush" Value="#aaa"></Setter>
        <Setter Property="AutoGenerateColumns" Value="False"></Setter>
        <Setter Property="CanUserResizeColumns" Value="True"></Setter>
        <Setter Property="CanUserResizeRows" Value="True"></Setter>
        <Setter Property="SelectionMode" Value="Extended"></Setter>
        <Setter Property="CanUserReorderColumns" Value="True"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <Setter Property="CanUserDeleteRows" Value="False"></Setter>
        <Setter Property="IsReadOnly" Value="True"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"></Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"></Setter>
    </Style>
    <Style x:Key="DataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="AlternationCount" Value="2"></Setter>
        <Setter Property="AlternatingRowBackground" Value="#88F0F0F0"></Setter>
        <Setter Property="HeadersVisibility" Value="All"></Setter>
        <Setter Property="GridLinesVisibility" Value="All"></Setter>
        <Setter Property="HorizontalGridLinesBrush" Value="{Binding Path=BorderBrush,RelativeSource={RelativeSource Self}}"></Setter>
        <Setter Property="VerticalGridLinesBrush" Value="{Binding Path=BorderBrush,RelativeSource={RelativeSource Self}}"></Setter>
        <Setter Property="AutoGenerateColumns" Value="False"></Setter>
        <Setter Property="CanUserResizeColumns" Value="True"></Setter>
        <Setter Property="CanUserResizeRows" Value="True"></Setter>
        <Setter Property="SelectionMode" Value="Extended"></Setter>
        <Setter Property="CanUserReorderColumns" Value="True"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <Setter Property="CanUserDeleteRows" Value="False"></Setter>
        <Setter Property="IsReadOnly" Value="True"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"></Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"></Setter>
    </Style>
    <Style x:Key="{x:Type DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
    </Style>
    <Style x:Key="{x:Type DataGridRowHeader}" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="Foreground" Value="#666"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="DataGridRowHeaderRed" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey=FadeBrushRed}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="{x:Type DataGridRow}" TargetType="{x:Type DataGridRow}">
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="0" >
                <Setter Property="Background" Value="#88FFFFFF" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1" >
                <Setter Property="Background" Value="#88F0F0F0" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#88CCCCCC"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="#ffffff"/>
                <Setter Property="BorderBrush" Value="#AA0078FF"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type DataGridColumn}" TargetType="{x:Type DataGridColumn}"></Style>
    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}"></Style>
    <Style x:Key="{x:Type DataGridTextColumn}" TargetType="{x:Type DataGridTextColumn}">
        <Setter Property="ElementStyle">
            <Setter.Value>
                <Style TargetType="TextBox">
                    <Setter Property="BorderThickness" Value="1"></Setter>
                    <Setter Property="BorderBrush" Value="#ccc"></Setter>
                    <Setter Property="FontSize" Value="24"></Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridTemplateColumn_DropDownTable" TargetType="{x:Type DataGridTemplateColumn}">
        
    </Style>
    <Style x:Key="DataGridTextColumnCenter" TargetType="{x:Type DataGridTextColumn}">
        <Setter Property="ElementStyle">
            <Setter.Value>
                <Style TargetType="TextBox">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="TextAlignment" Value="Center"/>
                    <Setter Property="Padding" Value="0"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridCellContentCenter" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="DataGridCellCenter" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False" >
                <Setter Property="Foreground" Value="#000" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DataGridCellCenter_Editing" TargetType="{x:Type TextBox}">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="DataGridCellCenter_Number" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10"/>
    </Style>
    <Style x:Key="DataGridCellCenter_String" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10"/>
    </Style>
    <Style x:Key="DataGridCellCenter_CheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="IsEnabled" Value="False"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
    </Style>
    <Style x:Key="DataGridCellCenter_CheckBox_Editing" TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="IsEnabled" Value="True"></Setter>
    </Style>
    <Style x:Key="DataGridCellCenter_ComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="MinWidth" Value="80" />
    </Style>
    <Style x:Key="DataGridCellCenter_ComboBox_Editing" TargetType="{x:Type ComboBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="MinWidth" Value="80" />
    </Style>


    <!--分页样式 BEIN-->
    <Style x:Key="borderPageIndex" TargetType="Border">
        <Setter Property="BorderBrush" Value="#ccc"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="CornerRadius" Value="30"></Setter>
        <Setter Property="Background" Value="#aaffffff"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="MinWidth" Value="30"></Setter>
        <Setter Property="Margin" Value="0 0 5 0"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#666"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="borderPageIndex_Current" TargetType="Border">
        <Setter Property="BorderBrush" Value="White"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="CornerRadius" Value="30"></Setter>
        <Setter Property="Background" Value="#333"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="MinWidth" Value="30"></Setter>
        <Setter Property="Margin" Value="0 0 5 0"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#333"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="lblPageIndex" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#999"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#666"></Setter>
                <Setter Property="FontWeight" Value="Bold"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="lblPageIndex_Current" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#fff"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Yellow"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="txtToPage" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="200"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Rectangle x:Name="txtBorder" RadiusX="2" RadiusY="0" Fill="{TemplateBinding Background}" Stroke="#aacccccc"  StrokeThickness="1"/>
                        <ScrollViewer x:Name="PART_ContentHost" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Padding="{TemplateBinding Padding}"></ScrollViewer>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnToPage" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#333"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#aacccccc"/>
        <Setter Property="BorderBrush" Value="#aacccccc"/>
        <Setter Property="BorderThickness" Value="0,1,1,1"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                            Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" 
                            CornerRadius="0 3 3 0">
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}">
                        </ContentPresenter>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#268dc7" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.Setters>
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="#268dc7" />
                                <Setter Property="Foreground" Value="#fff" />
                            </Trigger.Setters>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.Setters>
                                <Setter Property="Background" Value="#888" />
                                <Setter Property="Foreground" Value="#000" />
                            </Trigger.Setters>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--分页样式 END-->

    <!--TabControl样式-->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30px"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" BorderThickness="1,0,1,1" Panel.ZIndex="2" CornerRadius="0,0,2,2" BorderBrush="#ddd" Background="#AAFFFFFF">
                            <ContentPresenter ContentSource="SelectedContent"/>
                        </Border>
                        <StackPanel Orientation="Horizontal" Grid.Row="0" Panel.ZIndex="1" IsItemsHost="true"/>
                        <Rectangle Grid.Row="0" Height="1" VerticalAlignment="Bottom" Fill="#ddd"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabItem style -->
    <LinearGradientBrush x:Key="TabItemFadeBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#eee" Offset="0"/>
        <GradientStop Color="#d1d1d1" Offset="0.5"/>
        <GradientStop Color="#dbdbdb" Offset="0.5"/>
        <GradientStop Color="#fff" Offset="1"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Margin" Value="0 0 1 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="bd" Background="{DynamicResource TabItemFadeBrush}" BorderBrush="#ccc" BorderThickness="1 1 1 1" Padding="0 4" CornerRadius="5 5 0 0">
                        <ContentPresenter x:Name="TabItemContent" ContentSource="Header" Margin="10,2,10,2" VerticalAlignment="Center" TextElement.Foreground="#333"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter TargetName="bd" Property="Background" Value="#AAFFFFFF"/>
                            <Setter TargetName="bd" Property="BorderBrush" Value="#ccc"/>
                            <Setter TargetName="bd" Property="BorderThickness" Value="1 1 1 0"/>
                            <Setter TargetName="TabItemContent" Property="TextElement.FontWeight" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--列表样式-->
    <Style x:Key="listViewHeader" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Height" Value="40"/>
    </Style>
    <!--ListViewItem的样式-->
    <Style x:Key="listViewItem" TargetType="{x:Type ListViewItem}">
        <Style.Setters>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="bd" BorderThickness="1" Padding="{TemplateBinding Padding}" CornerRadius="5" SnapsToDevicePixels="True">
                            <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Trigger.Setters>
                                    <Setter TargetName="bd" Property="Background" Value="#AACCCCCC" />
                                </Trigger.Setters>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.Setters>
                                    <Setter TargetName="bd" Property="Background" Value="#AAEEEEEE"/>
                                </Trigger.Setters>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>


    <!--框架样式 END-->

    <!--WrapPanel-->
    <Style x:Key="panelWrapPanel" TargetType="{x:Type WrapPanel}">

    </Style>

    <!--无边框窗体样式-->
    <Style x:Key="NoBorder_Window" TargetType="{x:Type Window}">
        <Setter Property="AllowsTransparency" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Consolas, Microsoft YaHei"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Margin="10">
                        <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" RadiusX="5" RadiusY="5">
                            <Rectangle.Effect>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="0"/>
                            </Rectangle.Effect>
                        </Rectangle>
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Margin}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            CornerRadius="10">
                            <ContentPresenter />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--日程控件-->
    <Style x:Key="borderCalendarDay" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Background" Value="#88FFFFFF"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>
    <Style x:Key="borderCalendarDay_Current" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="CornerRadius" Value="60"/>
        <Setter Property="Background" Value="#0090ff"/>
    </Style>
    <Style x:Key="lblCalendarDayText" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Foreground" Value="Gray"/>
    </Style>
    <Style x:Key="lblCalendarDayText_Current" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
    </Style>

</ResourceDictionary>
    